# tg_bot.py
import asyncio
import os
import csv
import logging
import datetime
import re
import json

from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
)

from kbds.inline import start_kbd, back_kbds, social_no_kbd, admin_panel, admin_choices_kbd

from dotenv import load_dotenv
load_dotenv()

import config
from check_subscriptions import check_instagram_follow, check_tiktok_follow

bot_loop = asyncio.get_event_loop()


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("tg_bot")

BOT_TOKEN = os.getenv("TOKEN") or config.BOT_TOKEN

ADMINS_FILE = "admins.json"

def load_admins():
    if not os.path.exists(ADMINS_FILE):
        with open(ADMINS_FILE, "w", encoding="utf-8") as f:
            json.dump([], f)
    with open(ADMINS_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def add_admin(chat_id: int):
    admins = load_admins()
    if chat_id not in admins:
        admins.append(chat_id)
        with open(ADMINS_FILE, "w", encoding="utf-8") as f:
            json.dump(admins, f)
    return admins

ADMIN_CHAT_IDS = load_admins()

CSV_FILE = "data.csv"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ (—é–∑–µ—Ä –±—É–¥–µ—Ç –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç—ã)
subscribe_keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
    [types.InlineKeyboardButton(text="–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ Instagram", url="https://instagram.com/proove_gaming_ua")],
    [types.InlineKeyboardButton(text="–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ TikTok", url="https://tiktok.com/@proove_gaming_ua")],
    [types.InlineKeyboardButton(text="–Ø –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è", callback_data="check_subscription")]
])

# –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏, –µ—Å–ª–∏ –Ω–µ—Ç
if not os.path.exists(CSV_FILE):
    with open(CSV_FILE, "w", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow(
            [
                "–ü–Ü–ë",
                "–¢–µ–ª–µ—Ñ–æ–Ω",
                "Instagram",
                "TikTok",
                "YouTube Shorts",
                "–ü—ñ–¥–ø–∏—Å–Ω–∏–∫–∏ / –ü–µ—Ä–µ–≥–ª—è–¥–∏",
                "–Ü–¥–µ—è",
                "Telegram username",
                "–î–∞—Ç–∞",
                "–°—Ç–∞—Ç—É—Å",
                "chat_id",
            ]
        )

# –ö–æ–º–∞–Ω–¥—ã —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞ 
async def set_commands():
    commands = [
        types.BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
    ]
    
    await bot.set_my_commands(commands)

# ------------------ FSM ------------------
class Form(StatesGroup):
    pib = State()
    phone = State()
    instagram = State()
    tiktok = State()
    # youtube = State()
    followers = State()
    idea = State()
    check_subscription = State()

# ------------------ –£—Ç–∏–ª–∏—Ç—ã ------------------
def extract_username_from_link(url: str) -> str:
    """
    Extract username from instagram or tiktok url.
    Returns username or None.
    """
    if not url or not isinstance(url, str):
        return None
    url = url.strip().rstrip("/")
    # Instagram patterns
    m = re.search(r"(?:instagram\.com/)(?:@?)([A-Za-z0-9._]+)", url, re.IGNORECASE)
    if m:
        return m.group(1)
    # TikTok patterns
    m = re.search(r"(?:tiktok\.com/@)([A-Za-z0-9._]+)", url, re.IGNORECASE)
    if m:
        return m.group(1)
    # fallback: last path part
    parts = url.split("/")
    if parts:
        return parts[-1]
    return None

def update_status_in_csv(chat_id: int, status: str, csv_file: str = CSV_FILE):
    rows = []
    updated = False
    with open(csv_file, "r", encoding="utf-8", newline="") as f:
        reader = csv.DictReader(f)
        for row in reader:
            if str(row.get("chat_id")) == str(chat_id):
                row["–°—Ç–∞—Ç—É—Å"] = status
                updated = True
            rows.append(row)
    if updated:
        with open(csv_file, "w", encoding="utf-8", newline="") as f:
            writer = csv.DictWriter(f, fieldnames=[
                "–ü–Ü–ë",
                "–¢–µ–ª–µ—Ñ–æ–Ω",
                "Instagram",
                "TikTok",
                "YouTube Shorts",
                "–ü—ñ–¥–ø–∏—Å–Ω–∏–∫–∏ / –ü–µ—Ä–µ–≥–ª—è–¥–∏",
                "–Ü–¥–µ—è",
                "Telegram username",
                "–î–∞—Ç–∞",
                "–°—Ç–∞—Ç—É—Å",
                "chat_id",
            ])
            writer.writeheader()
            writer.writerows(rows)

# ------------------ –ö–æ–º–∞–Ω–¥—ã ------------------
@dp.message(CommandStart())
async def start_cmd(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç –∞–∫—Ü—ñ—ó Proove Gaming Challenge! –¢–æ–±—ñ –≤–∂–µ —î 18 —Ä–æ–∫—ñ–≤?",
        reply_markup=start_kbd,
    )

@dp.message(Command("id"))
async def get_admin_id(message: types.Message):
    await message.answer(f"–í–∞—à Chat_ID: {message.chat.id}")

@dp.message(Command("admin"))
async def get_admin_panel(message:types.Message):
    if message.chat.id in ADMIN_CHAT_IDS:
        await message.answer("TELEGRAM –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å", reply_markup=admin_panel)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏")

# ------------------ –ö–Ω–æ–ø–∫–∏ –≤–æ–∑—Ä–∞—Å—Ç ------------------
@dp.callback_query(lambda c: c.data == "start_yes")
async def user_info(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("üî§ –ù–∞–ø–∏—à–∏ —Å–≤–æ—î –ü–Ü–ë:")
    await state.set_state(Form.pib)

@dp.callback_query(lambda c: c.data == "start_no")
async def start_age_no(callback: types.CallbackQuery):
    await callback.message.answer(
        "–¶–µ –ø–æ–≥–∞–Ω–æ, –ø–æ—Ç—Ä—ñ–±–Ω–æ —â–æ–± –≤–∞–º –±—É–ª–æ –≤—ñ–¥ 18 —Ä–æ–∫—ñ–≤", reply_markup=back_kbds
    )

@dp.callback_query(lambda c: c.data == "previous_start_message")
async def previous_start_message(callback: types.CallbackQuery):
    await callback.message.answer(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç –∞–∫—Ü—ñ—ó Proove Gaming Challenge! –¢–æ–±—ñ –≤–∂–µ —î 18 —Ä–æ–∫—ñ–≤?",
        reply_markup=start_kbd,
    )

# ------------------ –ê–Ω–∫–µ—Ç–∞ ------------------
@dp.message(Form.pib)
async def get_pib(message: types.Message, state: FSMContext):
    await state.update_data(pib=message.text)

    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üì± –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)]],
        resize_keyboard=True,
    )
    await message.answer("üìû –ù–∞–¥—ñ—à–ª–∏ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:", reply_markup=kb)
    await state.set_state(Form.phone)

import csv

@dp.message(Form.phone)
async def get_phone(message: types.Message, state: FSMContext):
    if not message.contact or not message.contact.phone_number:
        await message.answer("‚ùó –ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ!")
        return

    phone = message.contact.phone_number

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –Ω–æ–º–µ—Ä –≤ CSV
    already_registered = False
    try:
        with open(CSV_FILE, "r", encoding="utf-8", newline="") as f:
            reader = csv.DictReader(f)
            for row in reader:
                if row.get("–¢–µ–ª–µ—Ñ–æ–Ω") == phone:
                    already_registered = True
                    break
    except FileNotFoundError:
        # –§–∞–π–ª –º–æ–∂–µ—Ç –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å, —Ç–æ–≥–¥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–∞
        pass

    if already_registered:
        await message.answer("‚ùå –¶–µ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π. –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–µ –¥–æ–∑–≤–æ–ª–µ–Ω–∞.")
        await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
        return

    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —É–Ω–∏–∫–∞–ª–µ–Ω ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    await state.update_data(phone=phone)

    await message.answer("üîó –í–≤–µ–¥–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–≤—ñ–π Instagram –ø—Ä–æ—Ñ—ñ–ª—å:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(Form.instagram)


@dp.message(Form.instagram)
async def get_instagram(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if text.lower() == "–Ω–µ–º–∞—î" or text == "–ù–µ–º–∞—î":
        await state.update_data(instagram="–ù–µ–º–∞—î")
        await message.answer("üîó –í–≤–µ–¥–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–≤—ñ–π TikTok –ø—Ä–æ—Ñ—ñ–ª—å:")
        await state.set_state(Form.tiktok)
        return

    if "instagram.com" not in text:
        await message.answer(
            "‚ùó –¶–µ –Ω–µ —Å—Ö–æ–∂–µ –Ω–∞ Instagram –ø–æ—Å–∏–ª–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑",
        )
        return

    # extract username and check subscription to target
    user_username = extract_username_from_link(text)
    if not user_username:
        await message.answer("‚ùó –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏—Ç—è–≥—Ç–∏ username –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    # Save link
    await state.update_data(instagram=text)

    # Run check against our target account(s) ‚Äî example "proove_gaming"
    target_instagram = "proove_gaming_ua"  # change if needed

    await message.answer("‚è≥ –ü–µ—Ä–µ–≤—ñ—Ä—è—é –ø—ñ–¥–ø–∏—Å–∫—É –≤ Instagram... –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π.")
    try:
        ok = await asyncio.wait_for(check_instagram_follow(target_instagram, user_username), timeout=120)
    except asyncio.TimeoutError:
        await message.answer("‚ùå –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–π–Ω—è–ª–∞ –∑–∞–±–∞–≥–∞—Ç–æ —á–∞—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {e}")
        return

    if ok:
        await message.answer("‚úÖ –í–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ Instagram! –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∞–Ω–∫–µ—Ç—É.")
        await message.answer("üîó –í–≤–µ–¥–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–≤—ñ–π TikTok –ø—Ä–æ—Ñ—ñ–ª—å:")
        await state.set_state(Form.tiktok)
    else:
        await message.answer(
            "‚ùå –ú–∏ –Ω–µ –∑–Ω–∞–π—à–ª–∏ –≤–∞—à—É –ø—ñ–¥–ø–∏—Å–∫—É –Ω–∞ Instagram. –ü—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ proove_gaming_ua —ñ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–Ø –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è'.",
            reply_markup=subscribe_keyboard
        )
        await state.set_state(Form.check_subscription)

@dp.message(Form.tiktok)
async def get_tiktok(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if text.lower() in ("–Ω–µ–º–∞—î", "–Ω–µ –º–∞—î", "–ù–µ–º–∞—î"):
        await state.update_data(tiktok="–ù–µ–º–∞—î")
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ followers, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º youtube
        await message.answer("üë• –í–≤–µ–¥–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤ –∞–±–æ —Å–µ—Ä–µ–¥–Ω—ñ –ø–µ—Ä–µ–≥–ª—è–¥–∏:")
        await state.set_state(Form.followers)
        return

    if "tiktok.com" not in text:
        await message.answer(
            "‚ùó –¶–µ –Ω–µ —Å—Ö–æ–∂–µ –Ω–∞ TikTok –ø–æ—Å–∏–ª–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑"
        )
        return

    user_username = extract_username_from_link(text)
    if not user_username:
        await message.answer("‚ùó –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏—Ç—è–≥—Ç–∏ username –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    await state.update_data(tiktok=text)

    target_tiktok = "proove_gaming_ua"
    await message.answer("‚è≥ –ü–µ—Ä–µ–≤—ñ—Ä—è—é –ø—ñ–¥–ø–∏—Å–∫—É –≤ TikTok... –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π.")
    try:
        ok = await asyncio.wait_for(check_tiktok_follow(target_tiktok, user_username), timeout=380)
    except asyncio.TimeoutError:
        await message.answer("‚ùå –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–π–Ω—è–ª–∞ –∑–∞–±–∞–≥–∞—Ç–æ —á–∞—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.", reply_markup=back_kbds)
        return
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {e}")
        return

    if ok:
        await message.answer("‚úÖ –í–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ TikTok! –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∞–Ω–∫–µ—Ç—É.")
        # –í–º–µ—Å—Ç–æ youtube ‚Äî —Å—Ä–∞–∑—É followers
        await message.answer("üë• –í–≤–µ–¥–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤ –∞–±–æ —Å–µ—Ä–µ–¥–Ω—ñ –ø–µ—Ä–µ–≥–ª—è–¥–∏:")
        await state.set_state(Form.followers)
    else:
        await message.answer(
            "‚ùå –ú–∏ –Ω–µ –∑–Ω–∞–π—à–ª–∏ –≤–∞—à—É –ø—ñ–¥–ø–∏—Å–∫—É –Ω–∞ TikTok. –ü—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ proove_gaming_ua —ñ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–Ø –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è'.",
            reply_markup=subscribe_keyboard
        )
        await state.set_state(Form.check_subscription)

@dp.callback_query(lambda c: c.data == "check_subscription")
async def check_subscription_again(callback: types.CallbackQuery, state: FSMContext):
    # –û—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç—å –æ—à–∏–±–∫—É –∏–∑-–∑–∞ —Ç–∞–π–º–∞—É—Ç–∞
    await callback.answer("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç—Ä–∏–≤–∞—î, –∑–∞—á–µ–∫–∞–π—Ç–µ...", show_alert=False)

    data = await state.get_data()
    ig_link = data.get("instagram")
    tt_link = data.get("tiktok")

    if ig_link and ig_link != "–ù–µ–º–∞—î":
        username = extract_username_from_link(ig_link)
        if username:
            await callback.message.answer("‚è≥ –ü–µ—Ä–µ–≤—ñ—Ä—è—é Instagram...")
            try:
                ok = await asyncio.wait_for(check_instagram_follow("proove_gaming_ua", username), timeout=120)
            except Exception as e:
                await callback.message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ: {e}")
                return
            if ok:
                await callback.message.answer("‚úÖ –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ Instagram –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞. –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ.")
                if not tt_link or tt_link == "–ù–µ–º–∞—î":
                    await callback.message.answer("üîó –í–≤–µ–¥–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–≤—ñ–π TikTok –ø—Ä–æ—Ñ—ñ–ª—å:")
                    await state.set_state(Form.tiktok)
                    return
            else:
                await callback.message.answer("‚ùå –í—Å–µ —â–µ –Ω–µ –±–∞—á–∏–º–æ –ø—ñ–¥–ø–∏—Å–∫–∏ –≤ Instagram. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ.")
                return

    if tt_link and tt_link != "–ù–µ–º–∞—î":
        username = extract_username_from_link(tt_link)
        if username:
            await callback.message.answer("‚è≥ –ü–µ—Ä–µ–≤—ñ—Ä—è—é TikTok...")
            try:
                ok = await asyncio.wait_for(check_tiktok_follow("proove_gaming_ua", username), timeout=120)
            except Exception as e:
                await callback.message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ: {e}")
                return
            if ok:
                await callback.message.answer("‚úÖ –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ TikTok –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞. –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ.")
                await callback.message.answer("üë• –í–≤–µ–¥–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤ –∞–±–æ —Å–µ—Ä–µ–¥–Ω—ñ –ø–µ—Ä–µ–≥–ª—è–¥–∏:")
                await state.set_state(Form.followers)
                return
            else:
                await callback.message.answer("‚ùå –í—Å–µ —â–µ –Ω–µ –±–∞—á–∏–º–æ –ø—ñ–¥–ø–∏—Å–∫–∏ –≤ TikTok. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ.")
                return

    # –ï—Å–ª–∏ –Ω–∏ –ø–æ Instagram, –Ω–∏ –ø–æ TikTok –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:
    await callback.message.answer(
        "‚ùó –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫–∏. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —á–∏ –≤–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–Ø –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è' —â–µ —Ä–∞–∑.",
        reply_markup=subscribe_keyboard,
    )

# @dp.message(Form.youtube)
# async def get_youtube(message: types.Message, state: FSMContext):
#     text = message.text.strip()
#     if text.lower() in ("–Ω–µ–º–∞—î", "–Ω–µ –º–∞—î", "–ù–µ–º–∞—î"):
#         await state.update_data(youtube="–ù–µ–º–∞—î")
#         await message.answer("üë• –í–≤–µ–¥–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤ –∞–±–æ —Å–µ—Ä–µ–¥–Ω—ñ –ø–µ—Ä–µ–≥–ª—è–¥–∏:")
#         await state.set_state(Form.followers)
#         return

#     if "youtube.com" not in text:
#         await message.answer(
#             "‚ùó –¶–µ –Ω–µ —Å—Ö–æ–∂–µ –Ω–∞ YouTube –ø–æ—Å–∏–ª–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏, —è–∫—â–æ –Ω–µ–º–∞—î –∞–∫–∞—É–Ω—Ç—É:",
#             reply_markup=social_no_kbd,
#         )
#         return

#     await state.update_data(youtube=text)
#     await message.answer("üë• –í–≤–µ–¥–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤ –∞–±–æ —Å–µ—Ä–µ–¥–Ω—ñ –ø–µ—Ä–µ–≥–ª—è–¥–∏:")
#     await state.set_state(Form.followers)

@dp.message(Form.followers)
async def get_followers(message: types.Message, state: FSMContext):
    await state.update_data(followers=message.text)
    await message.answer("üí° –û–ø–∏—à–∏ —ñ–¥–µ—é –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ —Ç–∞ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ –∑–Ω–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ—ó –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏:")
    await state.set_state(Form.idea)

@dp.callback_query(lambda c: c.data == "no_social_account")
async def no_social_account(callback: types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state == Form.instagram.state:
        await state.update_data(instagram="–ù–µ–º–∞—î")
        await callback.message.answer("üîó –í–≤–µ–¥–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–≤—ñ–π TikTok –ø—Ä–æ—Ñ—ñ–ª—å:")
        await state.set_state(Form.tiktok)
    elif current_state == Form.tiktok.state:
        await state.update_data(tiktok="–ù–µ–º–∞—î")
        await callback.message.answer("üë• –í–≤–µ–¥–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤ –∞–±–æ —Å–µ—Ä–µ–¥–Ω—ñ –ø–µ—Ä–µ–≥–ª—è–¥–∏:")
        await state.set_state(Form.followers)
    await callback.answer()

@dp.message(Form.idea)
async def get_idea(message: types.Message, state: FSMContext):
    await state.update_data(idea=message.text)
    data = await state.get_data()

    username = message.from_user.username or "–Ω–µ–º–∞—î"
    date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M")
    chat_id = message.chat.id

    row = [
        data.get("pib", ""),
        data.get("phone", ""),
        data.get("instagram", ""),
        data.get("tiktok", ""),
        data.get("youtube", ""),
        data.get("followers", ""),
        data.get("idea", ""),
        username,
        date,
        "–û—á—ñ–∫—É—î",
        chat_id,
    ]

    with open(CSV_FILE, "a", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow(row)

    for admin_id in ADMIN_CHAT_IDS:
        try:
            await bot.send_message(
                chat_id=admin_id,
                text=f"üì• –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞:\n\n"
                    f"üë§ –ü–Ü–ë: {data.get('pib','')}\n"
                    f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone','')}\n"
                    f"üì∑ Instagram: {data.get('instagram','')}\n"
                    f"üéµ TikTok: {data.get('tiktok','')}\n"
                    f"‚ñ∂Ô∏è YouTube Shorts: {data.get('youtube','')}\n"
                    f"üë• –ü—ñ–¥–ø–∏—Å–Ω–∏–∫–∏ / –ü–µ—Ä–µ–≥–ª—è–¥–∏: {data.get('followers','')}\n"
                    f"üí° –Ü–¥–µ—è: {data.get('idea','')}\n"
                    f"üìÖ –î–∞—Ç–∞: {date}\n"
                    f"üë§ Telegram: @{username}\n"
                    f"üßæ –°—Ç–∞—Ç—É—Å: –û—á—ñ–∫—É—î",
                parse_mode=ParseMode.HTML,
                reply_markup=admin_choices_kbd(chat_id, username)
            )
        except Exception as e:
            log.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É {admin_id}: {e}")


    await message.answer("‚úÖ –î—è–∫—É—î–º–æ! –¢–≤–æ—é –∑–∞—è–≤–∫—É –ø—Ä–∏–π–Ω—è—Ç–æ. –ú–∏ –∑–≤‚Äô—è–∂–µ–º–æ—Å—è –∑ —Ç–æ–±–æ—é –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º!")
    await state.clear()

# --------------- Admin decisions ---------------
reject_reasons = {
    "1": "‚ùå–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞\n–°—Ü–µ–Ω–∞—Ä—ñ–π –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –≤–∏–º–æ–≥–∞–º —á–µ–ª–µ–Ω–¥–∂—É. (–û–∑–Ω–∞–π–æ–º—Ç–µ—Å—å —ñ–∑ –ø—Ä–∞–≤–∏–ª–∞–º–∏ —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.)",
    "2": "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞\n–í–∏ –≤–∏–∫–æ–Ω–∞–ª–∏ –Ω–µ –≤—Å—ñ –∫—Ä–æ–∫–∏ –¥–ª—è —É—á–∞—Å—Ç—ñ. (–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —É–º–æ–≤–∏ —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.).",
    "3": "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞\n–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ—Ü–º–µ—Ä–µ–∂—É ‚Äî –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∞ —É–º–æ–≤–∞. (–î–æ–¥–∞–π—Ç–µ –ø—ñ–¥–ø–∏—Å–∫—É —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.)",
    "4": "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤ –¥–æ—Å—è–≥–Ω—É—Ç–∞. –î—è–∫—É—î–º–æ, —â–æ –≤–∏ —î —á–∞—Å—Ç–∏–Ω–æ—é Proove Gamingüëæ",
}

@dp.callback_query(lambda c: c.data and c.data.startswith("admin_accept_"))
async def handle_accept(callback: types.CallbackQuery):
    parts = callback.data.split("_", 3)
    if len(parts) < 4:
        await callback.answer("–ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ.", show_alert=True)
        return
    user_id_str = parts[2]
    safe_username = parts[3]
    try:
        user_id = int(user_id_str)
    except ValueError:
        await callback.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π chat_id.", show_alert=True)
        return
    username = safe_username.replace("__", "_")

    update_status_in_csv(user_id, "–ü—Ä–∏–π–Ω—è—Ç–æ")

    try:
        await bot.send_message(user_id, (
            "‚úÖ–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ –ø—Ä–∏–π–Ω—è—Ç–∞! \n\n"
            "–ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:\n"
            "1. –ó–Ω—ñ–º—ñ—Ç—å –≤—ñ–¥–µ–æ —Ç–∞ –æ–ø—É–±–ª—ñ–∫—É–π—Ç–µ –π–æ–≥–æ —É —Å–≤–æ—ó—Ö —Å–æ—Ü–º–µ—Ä–µ–∂–∞—Ö Instagram –∞–±–æ TikTok –¥–æ 30.08.\n"
            "2. –û–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ –≤—ñ–¥–º—ñ—Ç—å—Ç–µ –∞–∫–∞—É–Ω—Ç–∏ Proove Gaming —Ç–∞ –¥–æ–¥–∞–π—Ç–µ —Ö–µ—à—Ç–µ–≥ #ProoveGamingChallenge.\n"
            "3. –ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤–∞—à–µ –≤—ñ–¥–µ–æ —É Telegram @pgchallenge.\n\n"
            "–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—É —Ç–∞ —ñ–º–µ–Ω–∞ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ (–¢–æ–ø-3) –±—É–¥—É—Ç—å –æ–≥–æ–ª–æ—à–µ–Ω—ñ 04.09 –Ω–∞ –Ω–∞—à–∏—Ö –æ—Ñ—ñ—Ü—ñ–π–Ω–∏—Ö —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö:\n"
            "Instagram\n"
            "TikTok\n\n"
            "–ë–∞–∂–∞—î–º–æ —É—Å–ø—ñ—Ö—É!\n"
            "https://www.tiktok.com/@proove_gaming_ua?_t=ZM-8yohKjOALuI"
        ))
        await callback.message.edit_text(f"–†—ñ—à–µ–Ω–Ω—è '–ø—Ä–∏–π–Ω—è—Ç–æ' –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{username} ({user_id}).")
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É: {e}")

    await callback.answer("–ó–∞—è–≤–∫–∞ –ø—Ä–∏–π–Ω—è—Ç–∞!")


@dp.callback_query(lambda c: c.data and c.data.startswith("admin_reject_"))
async def handle_reject(callback: types.CallbackQuery):
    parts = callback.data.split("_", 4)
    if len(parts) < 5:
        await callback.answer("–ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ.", show_alert=True)
        return
    reason_key = parts[2]  # reject reason number: "1", "2", ...
    user_id_str = parts[3]
    safe_username = parts[4]

    try:
        user_id = int(user_id_str)
    except ValueError:
        await callback.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π chat_id.", show_alert=True)
        return

    username = safe_username.replace("__", "_")
    update_status_in_csv(user_id, f"–í—ñ–¥—Ö–∏–ª–µ–Ω–æ ({reason_key})")

    reason_text = reject_reasons.get(reason_key, "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞.")

    try:
        await bot.send_message(user_id, reason_text)
        await callback.message.edit_text(f"–†—ñ—à–µ–Ω–Ω—è '–≤—ñ–¥—Ö–∏–ª–µ–Ω–æ' (–ø—Ä–∏—á–∏–Ω–∞ {reason_key}) –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{username} ({user_id}).")
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É: {e}")

    await callback.answer(f"–ó–∞—è–≤–∫–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞ –∑ –ø—Ä–∏—á–∏–Ω–æ—é {reason_key}!")


# FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
class AdminFSM(StatesGroup):
    waiting_chat_id = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞"
@dp.callback_query(lambda c: c.data == "add_new_admin")
async def add_new_admin_callback(callback: types.CallbackQuery, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
    admins = load_admins()
    if callback.from_user.id not in admins:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return

    await callback.message.answer("–í–≤–µ–¥–∏ chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º:")
    await state.set_state(AdminFSM.waiting_chat_id)
    await callback.answer()

@dp.message(AdminFSM.waiting_chat_id)
async def receive_new_admin(message: types.Message, state: FSMContext):
    try:
        new_admin_id = int(message.text)
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π chat_id. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    admins = add_admin(new_admin_id)
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—ã!\n–¢–µ–∫—É—â–∏–µ –∞–¥–º–∏–Ω—ã: {admins}")
    await state.clear()



# ------------------ –ó–∞–ø—É—Å–∫ ------------------
async def run_bot():
    
    await bot.delete_webhook(drop_pending_updates=True)
    await set_commands()

    try:
        me = await bot.get_me()
        log.info(f"–ë–æ—Ç @{me.username} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!")
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞: {e}")
        raise

    await dp.start_polling(bot)

# if __name__ == "__main__":
#     try:
#         asyncio.run(run_bot())
#     except (KeyboardInterrupt, SystemExit):
#         log.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–∏–π –≤—Ä—É—á–Ω—É")
