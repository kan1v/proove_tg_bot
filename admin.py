# admin.py
import logging
import asyncio
import time
import csv
from flask import Flask, render_template, redirect, url_for, request
from flask_basicauth import BasicAuth
from tg_bot import bot, bot_loop, bot_loop_ready, ADMIN_CHAT_IDS, CSV_FILE  # –ò–º–ø–æ—Ä—Ç –∏–∑ –±–æ—Ç–∞


# ---------------- –õ–û–ì–ò ----------------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ---------------- FLASK ----------------
app = Flask(__name__)
app.config['BASIC_AUTH_USERNAME'] = 'admin'
app.config['BASIC_AUTH_PASSWORD'] = 'admin'
app.config['BASIC_AUTH_FORCE'] = True
basic_auth = BasicAuth(app)

# ---------------- –ö–û–ù–°–¢–ê–ù–¢–´ ----------------
FIELDNAMES = [
    "–ü–Ü–ë", "–¢–µ–ª–µ—Ñ–æ–Ω", "Instagram", "TikTok", "YouTube Shorts",
    "–ü—ñ–¥–ø–∏—Å–Ω–∏–∫–∏ / –ü–µ—Ä–µ–≥–ª—è–¥–∏", "–Ü–¥–µ—è", "Telegram username",
    "–î–∞—Ç–∞", "–°—Ç–∞—Ç—É—Å", "chat_id",
]

ACCEPT_TEXT = (
    "‚úÖ–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ –ø—Ä–∏–π–Ω—è—Ç–∞! \n\n"
    "–ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:\n"
    "1. –ó–Ω—ñ–º—ñ—Ç—å –≤—ñ–¥–µ–æ —Ç–∞ –æ–ø—É–±–ª—ñ–∫—É–π—Ç–µ –π–æ–≥–æ —É —Å–≤–æ—ó—Ö —Å–æ—Ü–º–µ—Ä–µ–∂–∞—Ö Instagram –∞–±–æ TikTok –¥–æ 30.08.\n"
    "2. –û–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ –≤—ñ–¥–º—ñ—Ç—å—Ç–µ –∞–∫–∞—É–Ω—Ç–∏ Proove Gaming —Ç–∞ –¥–æ–¥–∞–π—Ç–µ —Ö–µ—à—Ç–µ–≥ #ProoveGamingChallenge.\n"
    "3. –ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤–∞—à–µ –≤—ñ–¥–µ–æ —É Telegram @pgchallenge.\n\n"
    "–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—É —Ç–∞ —ñ–º–µ–Ω–∞ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ (–¢–æ–ø-3) –±—É–¥—É—Ç—å –æ–≥–æ–ª–æ—à–µ–Ω—ñ 04.09 –Ω–∞ –Ω–∞—à–∏—Ö –æ—Ñ—ñ—Ü—ñ–π–Ω–∏—Ö —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö:\n"
    "Instagram\nTikTok\n\n–ë–∞–∂–∞—î–º–æ —É—Å–ø—ñ—Ö—É!\n"
    "https://www.tiktok.com/@proove_gaming_ua?_t=ZM-8yohKjOALuI"
)

REJECT_REASONS = {
    "1": "‚ùå–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞\n–°—Ü–µ–Ω–∞—Ä—ñ–π –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –≤–∏–º–æ–≥–∞–º —á–µ–ª–µ–Ω–¥–∂—É. (–û–∑–Ω–∞–π–æ–º—Ç–µ—Å—å —ñ–∑ –ø—Ä–∞–≤–∏–ª–∞–º–∏ —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.)",
    "2": "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞\n–í–∏ –≤–∏–∫–æ–Ω–∞–ª–∏ –Ω–µ –≤—Å—ñ –∫—Ä–æ–∫–∏ –¥–ª—è —É—á–∞—Å—Ç—ñ. (–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —É–º–æ–≤–∏ —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.).",
    "3": "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞\n–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ—Ü–º–µ—Ä–µ–∂—É ‚Äî –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∞ —É–º–æ–≤–∞. (–î–æ–¥–∞–π—Ç–µ –ø—ñ–¥–ø–∏—Å–∫—É —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.)",
    "4": "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤ –¥–æ—Å—è–≥–Ω—É—Ç–∞. –î—è–∫—É—î–º–æ, —â–æ –≤–∏ —î —á–∞—Å—Ç–∏–Ω–æ—é Proove Gamingüëæ",
}

# ---------------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï ----------------
def read_csv():
    """–ß–∏—Ç–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∑–∞—è–≤–æ–∫"""
    with open(CSV_FILE, "r", encoding="utf-8") as f:
        return list(csv.DictReader(f))



def _send_message(chat_id: int, text: str) -> bool:
    max_wait = 5  # —Å–µ–∫—É–Ω–¥
    waited = 0
    while bot_loop is None and waited < max_wait:
        time.sleep(0.1)
        waited += 0.1

    if bot_loop is None:
        logger.error(f"‚ùå bot_loop —Ç–∞–∫ –∏ –Ω–µ –≥–æ—Ç–æ–≤, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ chat_id={chat_id}")
        return False

    try:
        future = asyncio.run_coroutine_threadsafe(bot.send_message(chat_id, text), bot_loop)
        future.result(timeout=15)
        logger.info(f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ chat_id={chat_id}")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ chat_id={chat_id}: {e}")
        return False




def notify_admins(text: str):
    """–£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤"""
    sent = sum(_send_message(admin_id, text) for admin_id in ADMIN_CHAT_IDS)
    logger.info(f"üëë –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {sent}/{len(ADMIN_CHAT_IDS)}")

def update_status_and_notify(chat_id: str, status: str, username: str, reason_key: str | None = None):
    """–ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –∏ —à–ª—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    rows = []
    pib = ""
    updated = False

    # –ß–∏—Ç–∞–µ–º –∏ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
    with open(CSV_FILE, "r", encoding="utf-8", newline="") as f:
        reader = csv.DictReader(f)
        for row in reader:
            if str(row.get("chat_id")) == str(chat_id):
                if status == "–í—ñ–¥—Ö–∏–ª–µ–Ω–æ" and reason_key:
                    row["–°—Ç–∞—Ç—É—Å"] = f"–í—ñ–¥—Ö–∏–ª–µ–Ω–æ ({reason_key})"
                else:
                    row["–°—Ç–∞—Ç—É—Å"] = status
                updated = True
                pib = row.get("–ü–Ü–ë", "")
            rows.append(row)

    if not updated:
        logger.warning(f"‚ö† –ó–∞—è–≤–∫–∞ —Å chat_id={chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    with open(CSV_FILE, "w", encoding="utf-8", newline="") as f:
        writer = csv.DictWriter(f, fieldnames=FIELDNAMES)
        writer.writeheader()
        writer.writerows(rows)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if status == "–ü—Ä–∏–π–Ω—è—Ç–æ":
        _send_message(int(chat_id), ACCEPT_TEXT)
    elif status == "–í—ñ–¥—Ö–∏–ª–µ–Ω–æ":
        _send_message(int(chat_id), REJECT_REASONS.get(reason_key, "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞."))

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    notify_admins(
        f"‚úèÔ∏è –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –∑–º—ñ–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å:\n"
        f"üë§ {pib}\n"
        f"@{username} ({chat_id})\n"
        f"–°—Ç–∞—Ç—É—Å: {('–í—ñ–¥—Ö–∏–ª–µ–Ω–æ (' + reason_key + ')') if status=='–í—ñ–¥—Ö–∏–ª–µ–Ω–æ' and reason_key else status}"
    )

# ---------------- ROUTES ----------------
@app.route("/")
@basic_auth.required
def index():
    return render_template("admin_table.html", rows=read_csv())

@app.route("/action/<chat_id>/<action>", methods=["POST"])
@basic_auth.required
def action(chat_id, action):
    username = next((r["Telegram username"] for r in read_csv() if str(r["chat_id"]) == str(chat_id)), "")
    if action == "accept":
        update_status_and_notify(chat_id, "–ü—Ä–∏–π–Ω—è—Ç–æ", username)
    elif action.startswith("reject_"):
        reason_key = action.split("_", 1)[1]
        update_status_and_notify(chat_id, "–í—ñ–¥—Ö–∏–ª–µ–Ω–æ", username, reason_key)
    return redirect(url_for('index'))

@app.route("/delete/<chat_id>", methods=["POST"])
@basic_auth.required
def delete(chat_id):
    rows = read_csv()
    target = next((r for r in rows if str(r["chat_id"]) == str(chat_id)), None)
    if target:
        notify_admins(
            f"üóë –ó–∞—è–≤–∫—É –≤–∏–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å:\n"
            f"üë§ {target.get('–ü–Ü–ë', '')}\n"
            f"@{target.get('Telegram username', '')} ({chat_id})\n"
            f"–°—Ç–∞—Ç—É—Å: {target.get('–°—Ç–∞—Ç—É—Å', '')}"
        )
    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
    rows = [r for r in rows if str(r["chat_id"]) != str(chat_id)]
    with open(CSV_FILE, "w", encoding="utf-8", newline="") as f:
        writer = csv.DictWriter(f, fieldnames=FIELDNAMES)
        writer.writeheader()
        writer.writerows(rows)
    return redirect(url_for('index'))

@app.route("/delete_all", methods=["POST"])
@basic_auth.required
def delete_all():
    rows = read_csv()
    count = len(rows)
    if count > 0:
        notify_admins(
            f"üî• –í—Å—ñ –∑–∞—è–≤–∫–∏ ({count}) –±—É–ª–∏ –≤–∏–¥–∞–ª–µ–Ω—ñ —á–µ—Ä–µ–∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å!\n"
            f"–û—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Å:\n"
            f"üë§ {rows[-1].get('–ü–Ü–ë', '')}\n"
            f"@{rows[-1].get('Telegram username', '')} ({rows[-1].get('chat_id', '')})"
        )
    with open(CSV_FILE, "w", encoding="utf-8", newline="") as f:
        writer = csv.writer(f)
        writer.writerow(FIELDNAMES)
    return redirect(url_for('index'))

# ---------------- –ó–ê–ü–£–°–ö ----------------
def run_flask():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞...")
    app.run(host="0.0.0.0", port=5002, debug=False, use_reloader=False)
